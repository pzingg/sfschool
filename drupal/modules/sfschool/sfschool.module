<?php

function sfschool_help( $section, $args = array() ) {
    switch ($section) { 
    case 'admin/modules#description': 
        return t('Implements hooks for CiviCRM to customize the SFSchool site');
    default :
        return;
    } 
}

function _sfschool_initialize( ) {
    $template = CRM_Core_Smarty::singleton( );

    $sfschoolDir = 
        dirname( __FILE__ ) . DIRECTORY_SEPARATOR .
        '..'                . DIRECTORY_SEPARATOR .
        '..'                . DIRECTORY_SEPARATOR .
        'templates';

    if ( is_array( $template->template_dir ) ) {
        $template->template_dir = array( $sfschoolDir ) + $template->template_dir;                            
    } else {
        $template->template_dir = array( $sfschoolDir, $template->template_dir );
    }

}

function sfschool_civicrm_pageRun( &$page ) {
    if ( $page->getVar( '_name' ) == 'CRM_Profile_Page_Dynamic' ) {
        $gid = $page->getVar( '_gid' );
        if ( $gid == 3 ) {
            return _sfschool_civicrm_pageRun_Profile_Page_Dynamic_3( $page, $gid );
        }
        if ( $gid == 4 ) {
            return _sfschool_civicrm_pageRun_Profile_Page_Dynamic_4( $page, $gid );
        }
        
    }
}

function _sfschool_civicrm_pageRun_Profile_Page_Dynamic_3( &$page, $gid ) {
    // get all permissioned children only
    $query = "
SELECT     c.id, c.display_name, r.is_permission_b_a, sis.subtype_1, sis.grade_2
FROM       civicrm_contact c
INNER JOIN civicrm_relationship r ON r.contact_id_a = c.id
LEFT JOIN  civicrm_value_school_information_1 sis ON sis.entity_id = c.id
WHERE      r.relationship_type_id = 1
AND        r.is_active    = 1
AND        r.is_permission_b_a = 1
AND        r.contact_id_b = %1
AND        r.contact_id_a = c.id
AND        sis.entity_id = c.id
";
    $params  = array( 1 => array( $page->getVar( '_id' ), 'Integer' ) );

    $dao = CRM_Core_DAO::executeQuery( $query, $params );
    $values = $childrenIDs = array( );
    while ( $dao->fetch( ) ) {
        $value = array( 'id'              => $dao->id,
                        'name'            => $dao->display_name,
                        'is_permissioned' => $dao->is_permission_b_a,
                        'sub_type'        => $dao->sub_type_1,
                        'grade'           => $dao->grade_2,
                        'meeting'         => null,
                        'extendedCare'    => null );
        $childrenIDs[$dao->id] = 1;
        $values[$dao->id] = $value;
    }

    _sfschool_getMeetingInfo( $childrenIDs, $values );

    require_once 'Utils/ExtendedCare.php';
    sfschool_Utils_ExtendedCare::getValues( $childrenIDs, $values );

    $page->assign( 'childrenInfo', $values );
}


function _sfschool_getMeetingInfo( $childrenIDs, &$values ) {
    // check if we need to schedule this parent for a meeting
    // or display any future scheduled meetings
    if ( empty( $childrenIDs ) ) {
        return;
    }

    $childrenIDString = implode( ',', array_keys( $childrenIDs ) );

    // first first all scheduled meetings
    $query = "
SELECT     a.id, a.activity_date_time, a.subject, a.location, r.contact_id_b, aac.id, aac.display_name
FROM       civicrm_activity a
INNER JOIN civicrm_activity_assignment aa ON a.id = aa.activity_id
INNER JOIN civicrm_activity_target     at ON a.id = at.activity_id
INNER JOIN civicrm_contact            aac ON aa.assignee_contact_id = aac.id
INNER JOIN civicrm_relationship         r ON r.contact_id_a         = aac.id
WHERE      a.activity_type_id = 1
AND        a.status_id = 1
AND        r.relationship_type_id = 10
AND        r.contact_id_b IN ( $childrenIDString )
AND        aa.assignee_contact_id = r.contact_id_a
AND        at.target_contact_id = r.contact_id_b;
";
    $dao = CRM_Core_DAO::executeQuery( $query );
    while ( $dao->fetch( ) ) {
        $values[$dao->contact_id_b]['meeting'] = "Your {$dao->subject} is scheduled for<br/>{$dao->activity_date_time} with {$dao->display_name}";
        unset( $childrenIDs[$dao->contact_id_b] );
    }

    // check if other children left to schedule a meeting
    if ( empty( $childrenIDs ) ) {
        return;
    }

    $childrenIDString = implode( ',', array_keys( $childrenIDs ) );

    $query = "
SELECT     r.contact_id_b, a.subject, a.location, aac.display_name, aac.id as advisor_id
FROM       civicrm_activity a
INNER JOIN civicrm_activity_assignment aa ON a.id = aa.activity_id
INNER JOIN civicrm_contact            aac ON aa.assignee_contact_id = aac.id
INNER JOIN civicrm_relationship         r ON r.contact_id_a = aac.id
LEFT  JOIN civicrm_activity_target     at ON a.id = at.activity_id
WHERE      a.activity_type_id = 1
AND        r.relationship_type_id = 10
AND        r.contact_id_b IN ($childrenIDString)
AND        a.status_id = 1
AND        at.target_contact_id IS NULL
GROUP BY r.contact_id_b
";

    $dao = CRM_Core_DAO::executeQuery( $query );
    while ( $dao->fetch( ) ) {
        $parentID = $page->getVar( '_id' );
        $url = CRM_Utils_System::url( 'civicrm/profile/edit', "reset=1&gid=4&id={$dao->contact_id_b}&advisorID={$dao->advisor_id}&parentID={$parentID}" );
        $values[$dao->contact_id_b]['meeting'] = "<a href=\"{$url}\">Please schedule your {$dao->subject}<br/> with {$dao->display_name} (Click on this link!)</a>";
    }
    
}

function _sfschool_civicrm_pageRun_Profile_Page_Dynamic_4( &$page, $gid ) {
    // get all parents (permissioned or not)
    $query = "
SELECT     p.id, p.display_name, r.is_permission_b_a, ph.phone, e.email
FROM       civicrm_contact p
INNER JOIN civicrm_relationship r ON r.contact_id_b = p.id
LEFT  JOIN civicrm_email e  ON e.contact_id  = p.id
LEFT  JOIN civicrm_phone ph ON ph.contact_id = p.id
WHERE      r.relationship_type_id = 1
AND        r.is_active    = 1
AND        r.contact_id_a = %1
";

    $childID = $page->getVar( '_id' );
    $params = array( 1 => array( $childID, 'Integer' ) );
    $dao = CRM_Core_DAO::executeQuery( $query, $params );
    $values = array( );
    $values[$childID] = array( 'parents' => array( ) );
    while ( $dao->fetch( ) ) {
        $values[$childID]['parents'][$dao->id] =
            array( 'id'              => $dao->id,
                   'name'            => $dao->display_name,
                   'is_permissioned' => $dao->is_permission_b_a,
                   'phone'           => $dao->phone,
                   'email'           => $dao->email );
    }

    require_once 'Utils/ExtendedCare.php';
    sfschool_Utils_ExtendedCare::getValues( $childID, $values );

    $page->assign( 'childInfo', $values[$childID] );
}

function sfschool_civicrm_buildForm( $formName, &$form ) {
    if ( $formName == 'CRM_Profile_Form_Edit' ) {
        $gid = $form->getVar( '_gid' );
        if ( $gid == 4 ) {
            return _sfschool_civicrm_buildForm_CRM_Profile_Form_Edit_4( $formName, $form, $gid );
        }
        if ( $gid == 3 ) {
            return _sfschool_civicrm_buildForm_CRM_Profile_Form_Edit_3( $formName, $form, $gid );
        }

    }

}

function _sfschool_civicrm_buildForm_CRM_Profile_Form_Edit_3( $formName, &$form, $gid ) {
}


function _sfschool_civicrm_buildForm_CRM_Profile_Form_Edit_4( $formName, &$form, $gid ) {

    // freeze first name, last name and grade
    $elementList = array( 'first_name', 'last_name', 'custom_2' );
    $form->freeze( $elementList );

    $childID   = $form->getVar( '_id' );
    $advisorID = CRM_Utils_Request::retrieve( 'advisorID', 'Integer', $form, false, null, $_REQUEST );
    $parentID  = CRM_Utils_Request::retrieve( 'parentID' , 'Integer', $form, false, null, $_REQUEST );

    if ( ! empty( $advisorID ) && ! empty( $parentID ) ) {
        _sfschool_civicrm_buildForm_addMeetingActivity( $form,
                                                        $childID,
                                                        $advisorID,
                                                        $parentID );
    }

    require_once 'Utils/ExtendedCare.php';
    sfschool_Utils_ExtendedCare::buildForm( $form, $childID );
}

function _sfschool_civicrm_buildForm_addMeetingActivity( &$form,
                                                         $childID,
                                                         $advisorID,
                                                         $parentID ) {
    // add scheduling information if any
    $query = "
SELECT     r.contact_id_b, a.id as activity_id, a.activity_date_time, a.subject, a.location, aac.display_name, aac.id as advisor_id
FROM       civicrm_activity a
INNER JOIN civicrm_activity_assignment aa ON a.id = aa.activity_id
INNER JOIN civicrm_contact            aac ON aa.assignee_contact_id = aac.id
INNER JOIN civicrm_relationship         r ON r.contact_id_a = aac.id
LEFT  JOIN civicrm_activity_target     at ON a.id = at.activity_id
WHERE      a.activity_type_id = 1
AND        r.relationship_type_id = 10
AND        r.contact_id_a = %1
AND        r.contact_id_b = %2
AND        a.status_id = 1
AND        at.target_contact_id IS NULL
";

    $params = array( 1 => array( $advisorID, 'Integer' ),
                     2 => array( $childID  , 'Integer' ) );
    $dao = CRM_Core_DAO::executeQuery( $query, $params );
    $elements = array( );
    while ( $dao->fetch( ) ) {
        $elements[$dao->activity_id] = $dao->activity_date_time;
    }

    $form->addElement( 'select', 'sfschool_activity_id', "Choose a Meeting time for<br/> {$dao->subject}", $elements, true );
}

function sfschool_civicrm_postProcess( $class, &$form ) {
    if ( is_a( $form, 'CRM_Profile_Form_Edit' ) ) {
        $gid = $form->getVar( '_gid' );
        if ( $gid == 4 ) {
            sfschool_civicrm_postProcess_CRM_Profile_Form_Edit_4( $class, $form, $gid );
            return;
        }
    }
}

function sfschool_civicrm_postProcess_CRM_Profile_Form_Edit_4( $class, &$form, $gid ) {
    $parentID   = $form->get( 'parentID' );
    $advisorID  = $form->get( 'advisorID' );

    if ( ! empty( $advisorID ) && ! empty( $parentID ) ) {
        _sfschool_civicrm_postProcess_addMeetingActivity( $class, $form, $gid,
                                                          $advisorID, $parentID );
        return;
    }

    require_once 'Utils/ExtendedCare.php';
    sfschool_Utils_ExtendedCare::postProcess( $class, $form, $gid );
}

function _sfschool_civicrm_postProcess_addMeetingActivity( $class,
                                                           &$form,
                                                           $gid,
                                                           $advisorID,
                                                           $parentID ) {
    $params = $form->controller->exportValues( $form->getVar( '_name' ) );

    $activityID = CRM_Utils_Array::value( 'sfschool_activity_id', $params );
    $childID    = $form->getVar( '_id' );

    if ( empty( $activityID ) || empty( $childID ) ) {
        return;
    }

    // insert these two into civicrm_target
    // we actually need to lock this and then ensure the space is available
    // lets do that at a later stage
    $query = "
INSERT INTO civicrm_activity_target (activity_id, target_contact_id)
VALUES
( %1, %2 ),
( %1, %3 )
";
    $params = array( 1 => array( $activityID, 'Integer' ),
                     2 => array( $childID   , 'Integer' ),
                     3 => array( $parentID  , 'Integer' ) );
    CRM_Core_DAO::executeQuery( $query, $params );
    
    return;
}
