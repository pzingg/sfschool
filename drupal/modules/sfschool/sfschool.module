<?php

function sfschool_help( $section, $args = array() ) {
    switch ($section) { 
    case 'admin/modules#description': 
        return t('Implements hooks for CiviCRM to customize the SFSchool site');
    default :
        return;
    } 
}

function _sfschool_initialize( ) {
    $template = CRM_Core_Smarty::singleton( );

    $sfschoolDir = 
        dirname( __FILE__ ) . DIRECTORY_SEPARATOR .
        '..'                . DIRECTORY_SEPARATOR .
        '..'                . DIRECTORY_SEPARATOR .
        'templates';

    if ( is_array( $template->template_dir ) ) {
        $template->template_dir = array( $sfschoolDir ) + $template->template_dir;                            
    } else {
        $template->template_dir = array( $sfschoolDir, $template->template_dir );
    }

}

function sfschool_civicrm_pageRun( &$page ) {
    if ( $page->getVar( '_name' ) == 'CRM_Profile_Page_Dynamic' ) {
        $gid = $page->getVar( '_gid' );
        if ( $gid == 3 ) {
            return _sfschool_civicrm_pageRun_Profile_Page_Dynamic_3( $page, $gid );
        }
        if ( $gid == 4 ) {
            return _sfschool_civicrm_pageRun_Profile_Page_Dynamic_4( $page, $gid );
        }
        
    }
}

function _sfschool_civicrm_pageRun_Profile_Page_Dynamic_3( &$page, $gid ) {
    // get all permissioned children only
    $query = "
SELECT     c.id, c.display_name, r.is_permission_b_a, sis.subtype_1, sis.grade_2
FROM       civicrm_contact c
INNER JOIN civicrm_relationship r ON r.contact_id_a = c.id
LEFT JOIN  civicrm_value_school_information_1 sis ON sis.entity_id = c.id
WHERE      r.relationship_type_id = 1
AND        r.is_active    = 1
AND        r.is_permission_b_a = 1
AND        r.contact_id_b = %1
AND        r.contact_id_a = c.id
AND        sis.entity_id = c.id
";
    $varName = 'childrenInfo';

    $params = array( 1 => array( $page->getVar( '_id' ), 'Integer' ) );
    $dao = CRM_Core_DAO::executeQuery( $query, $params );
    $values = $childrenIDs = array( );
    while ( $dao->fetch( ) ) {
        $value = array( 'id'              => $dao->id,
                        'name'            => $dao->display_name,
                        'is_permissioned' => $dao->is_permission_b_a,
                        'sub_type'        => $dao->sub_type_1,
                        'grade'           => $dao->grade_2,
                        'meeting'         => null,
                        'extendedCare'    => null );
        $childrenIDs[$dao->id] = 1;
        $values[$dao->id] = $value;
    }

    _sfschool_getMeetingInfo( $childrenIDs, $values );

    _sfschool_getExtendedCareInfo( $childrenIDs, $values );

    $page->assign( $varName, $values );
}


function _sfschool_getMeetingInfo( $childrenIDs, &$values ) {
    // check if we need to schedule this parent for a meeting
    // or display any future scheduled meetings
    if ( empty( $childrenIDs ) ) {
        return;
    }

    $childrenIDString = implode( ',', array_keys( $childrenIDs ) );

    // first first all scheduled meetings
    $query = "
SELECT     a.id, a.activity_date_time, a.subject, a.location, r.contact_id_b, aac.id, aac.display_name
FROM       civicrm_activity a
INNER JOIN civicrm_activity_assignment aa ON a.id = aa.activity_id
INNER JOIN civicrm_activity_target     at ON a.id = at.activity_id
INNER JOIN civicrm_contact            aac ON aa.assignee_contact_id = aac.id
INNER JOIN civicrm_relationship         r ON r.contact_id_a         = aac.id
WHERE      a.activity_type_id = 1
AND        a.status_id = 1
AND        r.relationship_type_id = 10
AND        r.contact_id_b IN ( $childrenIDString )
AND        aa.assignee_contact_id = r.contact_id_a
AND        at.target_contact_id = r.contact_id_b;
";
    $dao = CRM_Core_DAO::executeQuery( $query );
    while ( $dao->fetch( ) ) {
        $values[$dao->contact_id_b]['meeting'] = "Your {$dao->subject} is scheduled for<br/>{$dao->activity_date_time} with {$dao->display_name}";
        unset( $childrenIDs[$dao->contact_id_b] );
    }

    // check if other children left to schedule a meeting
    if ( empty( $childrenIDs ) ) {
        return;
    }

    $childrenIDString = implode( ',', array_keys( $childrenIDs ) );

    $query = "
SELECT     r.contact_id_b, a.subject, a.location, aac.display_name, aac.id as advisor_id
FROM       civicrm_activity a
INNER JOIN civicrm_activity_assignment aa ON a.id = aa.activity_id
INNER JOIN civicrm_contact            aac ON aa.assignee_contact_id = aac.id
INNER JOIN civicrm_relationship         r ON r.contact_id_a = aac.id
LEFT  JOIN civicrm_activity_target     at ON a.id = at.activity_id
WHERE      a.activity_type_id = 1
AND        r.relationship_type_id = 10
AND        r.contact_id_b IN ($childrenIDString)
AND        a.status_id = 1
AND        at.target_contact_id IS NULL
GROUP BY r.contact_id_b
";

    $dao = CRM_Core_DAO::executeQuery( $query );
    while ( $dao->fetch( ) ) {
        $parentID = $page->getVar( '_id' );
        $url = CRM_Utils_System::url( 'civicrm/profile/edit', "reset=1&gid=4&id={$dao->contact_id_b}&advisorID={$dao->advisor_id}&parentID={$parentID}" );
        $values[$dao->contact_id_b]['meeting'] = "<a href=\"{$url}\">Please schedule your {$dao->subject}<br/> with {$dao->display_name} (Click on this link!)</a>";
    }
    
}

function _sfschool_getExtendedCareInfo( $childrenIDs, &$values ) {
    if ( empty( $childrenIDs ) ) {
        return;
    }

    $childrenIDString = implode( ',', array_keys( $childrenIDs ) );
    $term = defined( 'SFSCHOOL_TERM' ) ? SFSCHOOL_TERM : 'Fall 2009';

    $query = "
SELECT entity_id, term_4, name_3, description_9, instructor_5, day_of_week_10, fee_block_6, start_date_7, end_date_8
FROM   civicrm_value_extended_care_2
WHERE  entity_id IN ($childrenIDString)
AND    term_4 = %1
ORDER BY entity_id
";
    $params = array( 1 => array( $term, 'String' ) );
    $dao = CRM_Core_DAO::executeQuery( $query, $params );
    while ( $dao->fetch( ) ) {
        if ( ! $values[$dao->entity_id]['extendedCare'] ) {
            $values[$dao->entity_id]['extendedCare'] = array( );
        }
        $title = "{$dao->day_of_week_10}: {$dao->name_3}";
        if ( $dao->description_9 ) {
            $title .= " ({$dao->description_9})";
        }
        if ( $dao->instructor_5 ) {
            $title .= " w/{$dao->instructor_5}";
        }
        $values[$dao->entity_id]['extendedCare'][] = $title;
    }

}


function _sfschool_civicrm_pageRun_Profile_Page_Dynamic_4( &$page, $gid ) {

    // get all parents (permissioned or not)
    $query = "
SELECT     p.id, p.display_name, r.is_permission_b_a, ph.phone, e.email
FROM       civicrm_contact p
INNER JOIN civicrm_relationship r ON r.contact_id_b = p.id
LEFT  JOIN civicrm_email e  ON e.contact_id  = p.id
LEFT  JOIN civicrm_phone ph ON ph.contact_id = p.id
WHERE      r.relationship_type_id = 1
AND        r.is_active    = 1
AND        r.contact_id_a = %1
";
    $varName = 'parentInfo';

    $params = array( 1 => array( $page->getVar( '_id' ), 'Integer' ) );
    $dao = CRM_Core_DAO::executeQuery( $query, $params );
    $values = array( );
    while ( $dao->fetch( ) ) {
        $value = array( 'id'              => $dao->id,
                        'name'            => $dao->display_name,
                        'is_permissioned' => $dao->is_permission_b_a,
                        'phone'           => $dao->phone,
                        'email'           => $dao->email );
        $values[$dao->id] = $value;
    }

    $page->assign( $varName, $values );
}

function sfschool_civicrm_buildForm( $formName, &$form ) {
    if ( $formName == 'CRM_Profile_Form_Edit' ) {
        $gid = $form->getVar( '_gid' );
        if ( $gid == 4 ) {
            return _sfschool_civicrm_buildForm_CRM_Profile_Form_Edit_4( $formName, $form, $gid );
        }
        if ( $gid == 3 ) {
            return _sfschool_civicrm_buildForm_CRM_Profile_Form_Edit_3( $formName, $form, $gid );
        }

    }

}

function _sfschool_civicrm_buildForm_CRM_Profile_Form_Edit_3( $formName, &$form, $gid ) {
}


function _sfschool_civicrm_buildForm_CRM_Profile_Form_Edit_4( $formName, &$form, $gid ) {

    // freeze first name, last name and grade
    $elementList = array( 'first_name', 'last_name', 'custom_2' );
    $form->freeze( $elementList );

    $childID   = $form->getVar( '_id' );
    $advisorID = CRM_Utils_Request::retrieve( 'advisorID', 'Integer', $form, false, null, $_REQUEST );
    $parentID  = CRM_Utils_Request::retrieve( 'parentID' , 'Integer', $form, false, null, $_REQUEST );

    if ( ! empty( $advisorID ) && ! empty( $parentID ) ) {
        _sfschool_civicrm_buildForm_addMeetingActivity( $form,
                                                        $childID,
                                                        $advisorID,
                                                        $parentID );
    }

    _sfschool_civicrm_buildForm_addExtendedCare( $form, $childID );
}

function _sfschool_civicrm_buildForm_addExtendedCare( &$form,
                                                      $childID ) {
    $activities =& _sfschool_read_extendedCare_activities( );

    foreach ( $activities as $day => $values ) {
        if ( ! empty( $values['select'] ) ) {
            $select = array( '' => '- select -' ) + $values['select'];
            $form->addElement( 'select',
                               "sfschool_activity_$day",
                               $day,
                               $select );
        }
    }

}

function _sfschool_civicrm_buildForm_addMeetingActivity( &$form,
                                                         $childID,
                                                         $advisorID,
                                                         $parentID ) {
    // add scheduling information if any
    $query = "
SELECT     r.contact_id_b, a.id as activity_id, a.activity_date_time, a.subject, a.location, aac.display_name, aac.id as advisor_id
FROM       civicrm_activity a
INNER JOIN civicrm_activity_assignment aa ON a.id = aa.activity_id
INNER JOIN civicrm_contact            aac ON aa.assignee_contact_id = aac.id
INNER JOIN civicrm_relationship         r ON r.contact_id_a = aac.id
LEFT  JOIN civicrm_activity_target     at ON a.id = at.activity_id
WHERE      a.activity_type_id = 1
AND        r.relationship_type_id = 10
AND        r.contact_id_a = %1
AND        r.contact_id_b = %2
AND        a.status_id = 1
AND        at.target_contact_id IS NULL
";

    $params = array( 1 => array( $advisorID, 'Integer' ),
                     2 => array( $childID  , 'Integer' ) );
    $dao = CRM_Core_DAO::executeQuery( $query, $params );
    $elements = array( );
    while ( $dao->fetch( ) ) {
        $elements[$dao->activity_id] = $dao->activity_date_time;
    }

    $form->addElement( 'select', 'sfschool_activity_id', "Choose a Meeting time for<br/> {$dao->subject}", $elements, true );
}

function sfschool_civicrm_postProcess( $class, &$form ) {
    if ( is_a( $form, 'CRM_Profile_Form_Edit' ) ) {
        $gid = $form->getVar( '_gid' );
        if ( $gid == 4 ) {
            sfschool_civicrm_postProcess_CRM_Profile_Form_Edit_4( $class, $form, $gid );
            return;
        }
    }
}

function sfschool_civicrm_postProcess_CRM_Profile_Form_Edit_4( $class, &$form, $gid ) {
    $parentID   = $form->get( 'parentID' );
    $advisorID  = $form->get( 'advisorID' );

    if ( ! empty( $advisorID ) && ! empty( $parentID ) ) {
        _sfschool_civicrm_postProcess_addMeetingActivity( $class, $form, $gid,
                                                          $advisorID, $parentID );
        return;
    }

    _sfschool_civicrm_postProcess_addExtendedCare( $class, $form, $gid );
}

function _sfschool_civicrm_postProcess_addMeetingActivity( $class,
                                                           &$form,
                                                           $gid,
                                                           $advisorID,
                                                           $parentID ) {
    $params = $form->controller->exportValues( $form->getVar( '_name' ) );

    $activityID = CRM_Utils_Array::value( 'sfschool_activity_id', $params );
    $childID    = $form->getVar( '_id' );

    if ( empty( $activityID ) || empty( $childID ) ) {
        return;
    }

    // insert these two into civicrm_target
    // we actually need to lock this and then ensure the space is available
    // lets do that at a later stage
    $query = "
INSERT INTO civicrm_activity_target (activity_id, target_contact_id)
VALUES
( %1, %2 ),
( %1, %3 )
";
    $params = array( 1 => array( $activityID, 'Integer' ),
                     2 => array( $childID   , 'Integer' ),
                     3 => array( $parentID  , 'Integer' ) );
    CRM_Core_DAO::executeQuery( $query, $params );
    
    return;
}

function _sfschool_civicrm_postProcess_addExtendedCare( $class, $form, $gid ) {
    $childID   = $form->getVar( '_id' );

    if ( empty( $childID ) ||
         ! CRM_Utils_Rule::positiveInteger( $childID ) ) {
        return;
    }

    $params = $form->controller->exportValues( $form->getVar( '_name' ) );

    $daysOfWeek =& _sfschool_get_daysOfWeek( );

    $classSignedUpFor = array( );
    foreach ( $daysOfWeek as $day )  {
        if ( ! empty( $params["sfschool_activity_{$day}"] ) ) {
            $classSignedUpFor[$day] = $params["sfschool_activity_{$day}"];
        }
    }

    if ( empty( $classSignedUpFor ) ) {
        return;
    }

    // they have signed up for a class, so now process it
    $activities =& _sfschool_read_extendedCare_activities( );

    foreach ( $classSignedUpFor as $day => $classID ) {
        foreach ( $activities[$day]['details'] as $className => $classValues ) {
            if ( $classValues['id'] == $classID ) {
                _sfschool_civicrm_postProcess_extendedCareClass( $childID, $classValues );
            }
        }
    }

    exit( );
}

function _sfschool_civicrm_postProcess_extendedCareClass( $childID,
                                                          $classValues ) {
    $query = "
INSERT INTO civicrm_value_extended_care_2
( entity_id, term_4, name_3, description_9, instructor_5, day_of_week_10, fee_block_6, start_date_7 )
VALUES
( %1, %2, %3, %4, %5, %6, %7, %8 )
";

    $params = array( 1 => array( $childID, 'Integer' ),
                     2 => array( $classValues['term'], 'String' ),
                     3 => array( $classValues['name'], 'String' ),
                     4 => array( CRM_Utils_Array::value( 'description', $classValues, '' ),
                                 'String' ),
                     5 => array( CRM_Utils_Array::value( 'instructor', $classValues, '' ),
                                 'String' ),
                     6 => array( $classValues['day'], 'String' ),
                     7 => array( $classValues['fee block'], 'Float' ),
                     8 => array( CRM_Utils_Date::getToday( null, 'Ymd' ), 'Date' ) );
    CRM_Core_DAO::executeQuery( $query, $params );
}

function &_sfschool_read_extendedCare_activities( $grade    = 1, 
                                                   $fileName = null,
                                                   $term     = null ) {
    $activities = array( );

    if ( ! is_numeric( $grade ) ) {
        return $activities;
    }

    $section = 'elementary';
    if ( $grade > 5 ) {
        $section = 'middle school';
    }

    if ( empty( $term ) ) {
        $term = defined( 'SFSCHOOL_TERM' ) ? SFSCHOOL_TERM : 'Fall 2009';
    }
    $term = preg_replace('/\s+|\W+/', '', strtolower($term));

    if ( empty( $fileName ) ) {
        $fileName =
            dirname( __FILE__ ) . DIRECTORY_SEPARATOR .
            'sql'               . DIRECTORY_SEPARATOR .
            'ExtendedCare.csv';
    }

    $fdRead  = fopen( $fileName, 'r' );
    if ( ! $fdRead ) {
        CRM_Core_Error::fatal( );
    }

    // ignore first line
    $fields = fgetcsv( $fdRead );

    $daysOfWeek =& _sfschool_get_daysOfWeek( );

    foreach ( $daysOfWeek as $day )  {
        $activities[$day] = array( 'select'  => array( ),
                                   'details' => array( ) );
    }

    $errors = array( );
    while ( $fields = fgetcsv( $fdRead ) ) {
        if ( strtolower( $fields[7] ) != $section ) {
            continue;
        }

        $currentTerm = preg_replace('/\s+|\W+/', '', strtolower($fields[0]));
        if ( $currentTerm != $term ) {
            continue;
        }

        if ( ! in_array( $fields[4], $daysOfWeek ) ) {
            $errors[] = implode( ',', $fields );
            continue;
        }

        $id = preg_replace('/\s+|\W+/', '_', strtolower("{$fields[4]}_{$fields[1]}"));
        
        $title = $fields[1];
        if ( ! empty( $fields[2] ) ) {
            $title .= " ($fields[2])";
        }
        
        if ( ! empty( $fields[3] ) ) {
            $title .= " w/{$fields[3]}";
        }

        if ( $fields[6] > 1 ) {
            $title .= " - {$fields[6]} activity blocks";
        }

        $activities[$fields[4]]['select'][$id] = $title;

        $activities[$fields[4]]['details'][$fields[1]] = 
            array( 'id'               => $id,
                   'title'            => $title,
                   'term'             => $fields[0],
                   'name'             => $fields[1],
                   'description'      => $fields[2],
                   'instructor'       => $fields[3],
                   'day'              => $fields[4],
                   'max participants' => $fields[5],
                   'fee block'        => $fields[6],
                   'section'          => $fields[7],
                   'start date'       => $fields[8],
                   'end date'         => $fields[9],
                   );
                   
    }

    return $activities;
}

function &_sfschool_get_daysOfWeek( ) {
    static $_daysOfWeek = null;

    if ( ! $_daysOfWeek ) {
        $_daysOfWeek = array( 'Monday', 'Tuesday',
                              'Wednesday', 'Thursday',
                              'Friday' );
    }
    return $_daysOfWeek;

}




